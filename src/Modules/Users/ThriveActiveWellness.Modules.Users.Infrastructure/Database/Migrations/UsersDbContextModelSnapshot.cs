// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThriveActiveWellness.Modules.Users.Infrastructure.Database;

#nullable disable

namespace ThriveActiveWellness.Modules.Users.Infrastructure.Database.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    partial class UsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_code");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("PermissionCode", "RoleName")
                        .HasName("pk_role_permissions");

                    b.HasIndex("RoleName")
                        .HasDatabaseName("ix_role_permissions_role_name");

                    b.ToTable("role_permissions", "users");

                    b.HasData(
                        new
                        {
                            PermissionCode = "users:read",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "users:modify:current",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "equipment:search",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "equipment:read",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "exercise:read",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "exercise:search",
                            RoleName = "Client"
                        },
                        new
                        {
                            PermissionCode = "users:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "users:modify:current",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "users:modify",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "equipment:create",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "equipment:delete",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "equipment:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "equipment:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "exercise:create",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "exercise:read",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "exercise:update",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            PermissionCode = "exercise:search",
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<int>("UserTableId")
                        .HasColumnType("integer")
                        .HasColumnName("user_table_id");

                    b.HasKey("RolesName", "UserTableId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserTableId")
                        .HasDatabaseName("ix_user_roles_user_table_id");

                    b.ToTable("user_roles", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParQCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("pdf_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_parq_completions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_parq_completions_user_id");

                    b.ToTable("parq_completions", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConditionType")
                        .HasColumnType("integer")
                        .HasColumnName("condition_type");

                    b.Property<int?>("ParentQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_question_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("pk_parq_questions");

                    b.HasIndex("ParentQuestionId")
                        .HasDatabaseName("ix_parq_questions_parent_question_id");

                    b.ToTable("parq_questions", "users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Question = "Has your doctor ever said that you have a heart condition OR high blood pressure?"
                        },
                        new
                        {
                            Id = 2,
                            Question = "Do you feel pain in your chest at rest, during your daily activities of living, OR when you do physical activity?"
                        },
                        new
                        {
                            Id = 3,
                            Question = "Do you lose balance because of dizziness OR have you lost consciousness in the last 12 months?"
                        },
                        new
                        {
                            Id = 4,
                            Question = "Have you ever been diagnosed with another chronic medical condition (other than heart disease or high blood pressure)?"
                        },
                        new
                        {
                            Id = 5,
                            Question = "Are you currently taking prescribed medications for a chronic medical condition?"
                        },
                        new
                        {
                            Id = 6,
                            Question = "Do you currently have (or have had within the past 12 months) a bone, joint, or soft tissue problem that could be made worse by becoming more physically active?"
                        },
                        new
                        {
                            Id = 7,
                            Question = "Has your doctor ever said that you should only do medically supervised physical activity?"
                        },
                        new
                        {
                            Id = 8,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have Arthritis, Osteoporosis, or Back Problems?"
                        },
                        new
                        {
                            Id = 9,
                            ConditionType = 1,
                            ParentQuestionId = 8,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 10,
                            ConditionType = 1,
                            ParentQuestionId = 8,
                            Question = "Do you have joint problems causing pain, a recent fracture, or fracture caused by osteoporosis or cancer?"
                        },
                        new
                        {
                            Id = 11,
                            ConditionType = 1,
                            ParentQuestionId = 8,
                            Question = "Have you had steroid injections or taken steroid tablets regularly for more than 3 months?"
                        },
                        new
                        {
                            Id = 12,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you currently have Cancer of any kind?"
                        },
                        new
                        {
                            Id = 13,
                            ConditionType = 1,
                            ParentQuestionId = 12,
                            Question = "Does your cancer diagnosis include any of the following types: lung/bronchogenic, multiple myeloma, head, and/or neck?"
                        },
                        new
                        {
                            Id = 14,
                            ConditionType = 1,
                            ParentQuestionId = 12,
                            Question = "Are you currently receiving cancer therapy (such as chemotherapy or radiotherapy)?"
                        },
                        new
                        {
                            Id = 15,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have a Heart or Cardiovascular Condition?"
                        },
                        new
                        {
                            Id = 16,
                            ConditionType = 1,
                            ParentQuestionId = 15,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 17,
                            ConditionType = 1,
                            ParentQuestionId = 15,
                            Question = "Do you have an irregular heartbeat that requires medical management?"
                        },
                        new
                        {
                            Id = 18,
                            ConditionType = 1,
                            ParentQuestionId = 15,
                            Question = "Do you have chronic heart failure?"
                        },
                        new
                        {
                            Id = 19,
                            ConditionType = 1,
                            ParentQuestionId = 15,
                            Question = "Do you have diagnosed coronary artery disease and have not participated in regular physical activity in the last 2 months?"
                        },
                        new
                        {
                            Id = 20,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have High Blood Pressure?"
                        },
                        new
                        {
                            Id = 21,
                            ConditionType = 1,
                            ParentQuestionId = 20,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 22,
                            ConditionType = 1,
                            ParentQuestionId = 20,
                            Question = "Do you have a resting blood pressure equal to or greater than 160/90 mmHg with or without medication?"
                        },
                        new
                        {
                            Id = 23,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have any Metabolic Conditions?"
                        },
                        new
                        {
                            Id = 24,
                            ConditionType = 1,
                            ParentQuestionId = 23,
                            Question = "Do you often have difficulty controlling your blood sugar levels with foods, medications, or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 25,
                            ConditionType = 1,
                            ParentQuestionId = 23,
                            Question = "Do you often suffer from signs and symptoms of low blood sugar following exercise and/or during activities of daily living?"
                        },
                        new
                        {
                            Id = 26,
                            ConditionType = 1,
                            ParentQuestionId = 23,
                            Question = "Do you have any signs or symptoms of diabetes complications such as heart or vascular disease?"
                        },
                        new
                        {
                            Id = 27,
                            ConditionType = 1,
                            ParentQuestionId = 23,
                            Question = "Do you have other metabolic conditions such as pregnancy-related diabetes, chronic kidney disease, or liver problems?"
                        },
                        new
                        {
                            Id = 28,
                            ConditionType = 1,
                            ParentQuestionId = 23,
                            Question = "Are you planning to engage in unusually high intensity exercise in the near future?"
                        },
                        new
                        {
                            Id = 29,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have any Mental Health Problems or Learning Difficulties?"
                        },
                        new
                        {
                            Id = 30,
                            ConditionType = 1,
                            ParentQuestionId = 29,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 31,
                            ConditionType = 1,
                            ParentQuestionId = 29,
                            Question = "Do you have Down Syndrome AND back problems affecting nerves or muscles?"
                        },
                        new
                        {
                            Id = 32,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have a Respiratory Disease?"
                        },
                        new
                        {
                            Id = 33,
                            ConditionType = 1,
                            ParentQuestionId = 32,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 34,
                            ConditionType = 1,
                            ParentQuestionId = 32,
                            Question = "Has your doctor ever said your blood oxygen level is low at rest or during exercise and/or that you require supplemental oxygen therapy?"
                        },
                        new
                        {
                            Id = 35,
                            ConditionType = 1,
                            ParentQuestionId = 32,
                            Question = "If asthmatic, do you currently have symptoms of chest tightness, wheezing, laboured breathing, or consistent cough?"
                        },
                        new
                        {
                            Id = 36,
                            ConditionType = 1,
                            ParentQuestionId = 32,
                            Question = "Has your doctor ever said you have high blood pressure in the blood vessels of your lungs?"
                        },
                        new
                        {
                            Id = 37,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have a Spinal Cord Injury?"
                        },
                        new
                        {
                            Id = 38,
                            ConditionType = 1,
                            ParentQuestionId = 37,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 39,
                            ConditionType = 1,
                            ParentQuestionId = 37,
                            Question = "Do you commonly exhibit low resting blood pressure significant enough to cause dizziness, light-headedness, and/or fainting?"
                        },
                        new
                        {
                            Id = 40,
                            ConditionType = 1,
                            ParentQuestionId = 37,
                            Question = "Has your physician indicated that you exhibit sudden bouts of high blood pressure (known as Autonomic Dysreflexia)?"
                        },
                        new
                        {
                            Id = 41,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Have you had a Stroke?"
                        },
                        new
                        {
                            Id = 42,
                            ConditionType = 1,
                            ParentQuestionId = 41,
                            Question = "Do you have difficulty controlling your condition with medications or other physician-prescribed therapies?"
                        },
                        new
                        {
                            Id = 43,
                            ConditionType = 1,
                            ParentQuestionId = 41,
                            Question = "Do you have any impairment in walking or mobility?"
                        },
                        new
                        {
                            Id = 44,
                            ConditionType = 1,
                            ParentQuestionId = 41,
                            Question = "Have you experienced a stroke or impairment in nerves or muscles in the past 6 months?"
                        },
                        new
                        {
                            Id = 45,
                            ConditionType = 1,
                            ParentQuestionId = 4,
                            Question = "Do you have any other medical condition not listed above?"
                        },
                        new
                        {
                            Id = 46,
                            ConditionType = 1,
                            ParentQuestionId = 45,
                            Question = "Have you experienced a blackout, fainted, or lost consciousness as a result of a head injury within the last 12 months?"
                        },
                        new
                        {
                            Id = 47,
                            ConditionType = 1,
                            ParentQuestionId = 45,
                            Question = "Do you have a medical condition that is not listed (such as epilepsy, neurological conditions, kidney problems)?"
                        },
                        new
                        {
                            Id = 48,
                            ConditionType = 1,
                            ParentQuestionId = 45,
                            Question = "Do you currently live with two or more medical conditions?"
                        });
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("response");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("response_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_parq_responses");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_parq_responses_question_id");

                    b.ToTable("parq_responses", "users");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.Users.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.HasKey("Code")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "users");

                    b.HasData(
                        new
                        {
                            Code = "users:read"
                        },
                        new
                        {
                            Code = "users:modify"
                        },
                        new
                        {
                            Code = "users:modify:current"
                        },
                        new
                        {
                            Code = "equipment:create"
                        },
                        new
                        {
                            Code = "equipment:delete"
                        },
                        new
                        {
                            Code = "equipment:read"
                        },
                        new
                        {
                            Code = "equipment:update"
                        },
                        new
                        {
                            Code = "equipment:search"
                        },
                        new
                        {
                            Code = "exercise:create"
                        },
                        new
                        {
                            Code = "exercise:read"
                        },
                        new
                        {
                            Code = "exercise:update"
                        },
                        new
                        {
                            Code = "exercise:search"
                        });
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.Users.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_roles");

                    b.ToTable("roles", "users");

                    b.HasData(
                        new
                        {
                            Name = "Client"
                        },
                        new
                        {
                            Name = "Trainer"
                        },
                        new
                        {
                            Name = "MealService"
                        },
                        new
                        {
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.Users.User", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.HasKey("TableId")
                        .HasName("pk_users");

                    b.HasAlternateKey("Id")
                        .HasName("ak_users_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", "users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_code");

                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_name");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_name");

                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_table_id");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParQCompletion", b =>
                {
                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parq_completions_users_user_id");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqQuestion", b =>
                {
                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqQuestion", "ParentQuestion")
                        .WithMany("ConditionalQuestions")
                        .HasForeignKey("ParentQuestionId")
                        .HasConstraintName("fk_parq_questions_parq_questions_parent_question_id");

                    b.Navigation("ParentQuestion");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqResponse", b =>
                {
                    b.HasOne("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parq_responses_parq_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.Users.User", b =>
                {
                    b.OwnsOne("ThriveActiveWellness.Modules.Users.Domain.Users.UserFitnessProfile", "FitnessProfile", b1 =>
                        {
                            b1.Property<int>("UserTableId")
                                .HasColumnType("integer")
                                .HasColumnName("table_id");

                            b1.Property<string>("DietaryPreferences")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("dietary_preferences");

                            b1.Property<string>("FitnessGoals")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("fitness_goals");

                            b1.Property<int>("FitnessLevel")
                                .HasColumnType("integer")
                                .HasColumnName("fitness_level");

                            b1.Property<string>("HealthInformation")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("health_information");

                            b1.HasKey("UserTableId")
                                .HasName("pk_user_fitness_profiles");

                            b1.ToTable("user_fitness_profiles", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserTableId")
                                .HasConstraintName("fk_user_fitness_profiles_users_table_id");
                        });

                    b.OwnsOne("ThriveActiveWellness.Modules.Users.Domain.Users.UserParQ", "ParQ", b1 =>
                        {
                            b1.Property<int>("UserTableId")
                                .HasColumnType("integer")
                                .HasColumnName("table_id");

                            b1.Property<DateTimeOffset>("DateCompleted")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_completed")
                                .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                            b1.Property<string>("Responses")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("responses");

                            b1.HasKey("UserTableId")
                                .HasName("pk_user_par_qs");

                            b1.ToTable("user_parQs", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserTableId")
                                .HasConstraintName("fk_user_par_qs_users_table_id");
                        });

                    b.Navigation("FitnessProfile")
                        .IsRequired();

                    b.Navigation("ParQ")
                        .IsRequired();
                });

            modelBuilder.Entity("ThriveActiveWellness.Modules.Users.Domain.PARQ.ParqQuestion", b =>
                {
                    b.Navigation("ConditionalQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
